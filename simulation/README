
Run simulation:

ngspice sim.cir
...
ngspice 3 -> write sim.raw all


Check output:

user@pc:~/lsi/code/powermod-54260/simulation$ head -n 30 sim.raw
Title: * tps54260 dc-dc converter simulation
Date: Fri Oct 11 13:57:31  2024
Plotname: Transient Analysis
Flags: real
No. Variables: 4
No. Points: 2000001
Variables:
	0	time	time
	1	i(@l1[i])	current
	2	v(ph)	voltage
	3	v(vout)	voltage
Values:
 0	0.000000000000000e+00
	1.435565189333252e+00
	-3.967987878996392e-01
	1.613970904067401e-01

 1	1.000000000000000e-08
	1.435193009676569e+00
	-3.967883816142680e-01
	1.615411988679060e-01

 2	2.000000000000000e-08
	1.434820740914200e+00
	-3.967779714892672e-01
	1.616852600705034e-01

 3	3.000000000000000e-08
	1.434448387558980e+00
	-3.967675577172333e-01
...


Load in octave and plotting i(@l1[i]) :

user@pc:~/powermod-54260/simulation$ octave-cli
...
octave:1> k=spice_readfile("sim.raw");
s =

  scalar structure containing the fields:

    no_points = 0
    no_variables = 0
    dimensions = 0
    commands = {}(0x0)
    options = {}(0x0)
    title = * tps54260 dc-dc converter simulation
    date = Fri Oct 11 13:57:31  2024
    plotname = Transient Analysis

octave:2> plot(k(:,3))

Writing a wav file. 100MHz sampling frequency is probably overkill. Since audiowrite does not support float range has to be determined and the signal divided by range/2. Range (16V) and offset (0V) of the signal go into the name: 
octave:79> signal=(k(:,4)(1:10:end-1));
octave:80> audiowrite('powermod-voltage-0V-16V-100MHz.wav',signal./(16/2),100000000)
octave:81> signal=(k(:,2)(1:10:end-1));
octave:82> audiowrite('powermod-current-0A-16A-100MHz.wav',signal./(16/2),100000000)

... Reading back. Remember to scale the wav file signal read

octave:18> [signal_scaled,Fs] = audioread('powermod-current-0A-16A-100MHz.wav');
octave:19> signal=signal_scaled*(16/2)
octave:20> plot(signal)
